Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                8
On-line CPU(s) list:   0-7
Thread(s) per core:    2
Core(s) per socket:    4
Socket(s):             1
NUMA node(s):          1
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 58
Model name:            Intel(R) Core(TM) i7-3612QM CPU @ 2.10GHz
Stepping:              9
CPU MHz:               1263.855
CPU max MHz:           3100.0000
CPU min MHz:           1200.0000
BogoMIPS:              4192.97
Virtualization:        VT-x
L1d cache:             32K
L1i cache:             32K
L2 cache:              256K
L3 cache:              6144K
NUMA node0 CPU(s):     0-7

RAM total: 7844

Наблюдения и результаты.
2. Многопоточность стоит "денег". Накладные расхода на синхронизацию, создание потоков и т.п. замедляют работу приложения. Кроме того, скорее всего это еще и плохо конвейеризуется. НО: начиная с достаточно больших N, многопоточная версия становится чуть лучше. 

1. Казалось бы, чем больше потоков, тем быстрее должно работать, но увеличение производительности происходит примерно до 4-5 потоков. Дальше до 16 потоков держится примерно на таком же уровне. После 16 (в моем случае 32) время работы стало увеличиваться, т.к. накладные расходы на многопоточность становятся слишком большими. 
